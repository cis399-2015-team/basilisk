4) a discussion of the work needed to complete the project and what might be needed to maintain it for continued future use

We used several different Puppet modules to setup our samba server and client. The server is setup with the samba module. The client is setup with the smbclient module. Both client and server also use both the puppet provided firewall module and our custom samba_firewall module.

This samba module makes sure the samba package is installed on the server, ensures the shared folders are present, adds a custom smbadduser script, and uses a service resource to guarantee that the file server is always running. The smbadduser script is particularly useful for creating new users accounts. When run with smbadduser [username], if that user account already exists on the system, it generates a temporary semi-random password, uses that password to create the samba user, sets a flag to requires the user reset their password before access the share for the first time, and prints out the temporary password.

The smbclient module makes sure both the cifs-utils and smbclient programs are installed on the system. It creates an initial user group for samba shares that we use later in the module, ensures the ubuntu user we are sharing with is created and in the samba group, gives the ubuntu user sudoers privileges that allow them to mount shares, creates the initial mount directory, and uses a mount resource to add the website share to fstabs making it ready to mount by user ubuntu.

The firewall and samba_firewall modules together provide a puppetized method of managing iptables. Firewall is provided by Puppet Labs and is used by our samba_firewall module to apply all the rules we discussed at length in the security report.

Future maintenance of the project will include maintaining our Puppet modules, adding new users and groups, and doing regular updates to the all the software used on the server and client. Puppet module maintenance includes adding new shares including new groups or users for controlling access, to smb.conf. We must be aware of updates to our software and schedule times to apply updates so that it will not affect our user population. We must be responsive to the needs of our population in regards to promptly adding new users or shared directories, keeping limited groups to control access, and removing users and groups that are no longer needed. Also import will be keeping abreast of updates in the field of file sharing to make sure our system is not vulnerable to at present unknown issues. At some point in may be in our users' interest to move to another file sharing system at which point we would need to change everything we have setup to the new system.
