1) concrete goals for your project, and methods of testing and verification you will apply to determine whether those goals were met

We built a shared file system on an AWS instance using samba that only allows access to shares from clients on the same subnet as the server. We had several goals when designing this system such as actually installing the required software onto the server and client AWS instances and then maintaining them with puppet modules. The way we tested this was by using the functions of the installed software to test whether they worked, including "service samba status", then pushing updates to samba through Puppet and seeing if they were installed.

We wanted to guarantee that the shared folders located on the master were accessible from other machines. This can be tested by mounting a share from our samba server, named "basilisk1", on our client, named "basilisk2". Issuing the command "sudo mount -a" on the client mounts the shared directory in a Puppet managed local folder in the ubuntu user's home directory called "website" where the files can be edited. After editing, the website hosted on our master can be access from a browser where changes can be seen immediately. The website can be accessed at ec2-52-27-180-204.us-west-2.compute.amazonaws.com.

It was necessary that the shared file server be secure so that no unauthorized access to the shared folders was possible. Testing this simply required us to try to use the commands "sudo mount -a" or "smbclient //10.0.3.20/[Shared-folder] -U [User-account]", then enter the wrong password. Another test is attempting to manually mount the share with a user account that has not been created in samba on the server. For instance:

sudo mount -t cifs //10.0.3.20/website ~/website -o username=test,noexec,sec=ntlmv2

Since it denies access or entry into the system, the security tests are successful.

This shared directories also cannot be accessed outside of our subnet. This is testable by trying to access it via a home computer and trying to mount a shared folder using the command "smb://52.27.180.204/website". This mount never completes. Thus, it is impossible to connect via the server's public IP address and the folders are only mountable from inside the server's subdnet.
